generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider          = "postgres"
    url               = env("DATABASE_URL")
}

model Post {
  slug     String    @id
  views    Int       @default(0)
  comments Comment[]
}

model Comment {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postSlug  String
  post      Post     @relation(fields: [postSlug], references: [slug], onDelete: Cascade)
  comment   String
  createdAt DateTime @default(now())
}

model GitHubProject {
  name        String   @id
  createdAt   DateTime
  lastPush    DateTime
  description String
  issues      Int
  language    String?
  stars       Int
  url         String
}

model YouTubeStatistic {
  channel     String @id
  subscribers Int
  views       Int
  videos      Int
}

model Account {
    id                String  @id @default(uuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? 
    access_token      String? 
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? 
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(uuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(uuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    isAdmin       Boolean   @default(false)
    comments      Comment[]
    canComment    Boolean   @default(true)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
